#% text_encoding = iso8859_1
_package mt

_pragma(classify_level=basic, topic=type_dumper)
## Module definition.
## @slot {sw:char16_vector} name
## @slot {sw:char16_vector|sw:unset} prod
## @slot {sw:char16_vector|sw:unset} base_ver
## @slot {sw:char16_vector|sw:unset} cur_ver
## @slot {sw:simple_vector<E=mt:module_usage>} usgs
## @slot {sw:char16_vector|sw:unset} src
def_slotted_exemplar(
	:module_definition,
	{
		{:name, _unset, :readable, :public},
		{:prod, _unset, :readable, :public},
		{:base_ver, _unset, :readable, :public},
		{:cur_ver, _unset, :readable, :public},
		{:usgs, _unset, :readable, :public},
		{:src, _unset, :readable, :public}
	},
	{@mt:definition})
$

_pragma(classify_level=basic, topic=type_dumper, usage=external)
## @return {sw:integer}
module_definition.define_shared_constant(
	:instruction_type,
	2,
	:public)
$

_pragma(classify_level=basic, topic=type_dumper)
_method module_definition.new(name, product, base_version, current_version, usages, source_module_def)
	## Constructor.
	## @param {sw:char16_vector} name
	## @param {sw:char16_vector|sw:unset} product
	## @param {sw:char16_vector|sw:unset} base_version
	## @param {sw:char16_vector|sw:unset} current_version
	## @param {sw:simple_vector<E=mt:module_usage>} usages
	## @param {sw:char16_vector|sw:unset} source_module_def
	_return _clone.init(name, product, base_version, current_version, usages, source_module_def)
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_private _method module_definition.init(name, product, base_version, current_version, usages, source_module_def)
	## Initializer.
	## @param {sw:char16_vector} name
	## @param {sw:char16_vector|sw:unset} product
	## @param {sw:char16_vector|sw:unset} base_version
	## @param {sw:char16_vector|sw:unset} current_version
	## @param {sw:simple_vector<E=mt:module_usage>} usages
	## @param {sw:char16_vector|sw:unset} source_module_def
	.name << name
	.prod << product
	.base_ver << base_version
	.cur_ver << current_version
	.usgs << usages
	.src << source_module_def
	_return _self
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method module_definition.new_from(module)
	## Construct self from `sw:sw_module`.
	## @param {sw:sw_module} module
	## @return {_self}
	_local source_module_def <<
		_try
			>> system.pathname_down(module.full_directory, "module.def")
		_when error
			>> _unset
		_endtry

	_return _self.new(
		module.name,
		module.product.name,
		module.base_version,
		module.version,
		module.prerequisites.
			map(_proc(prereq) _return prereq[1] _endproc).
			as_sorted_collection().
			as_simple_vector().
			map(_proc(prereq) _return module_usage.new(prereq) _endproc),
		source_module_def)
_endmethod
$

_pragma(condition_definition=basic, topic=type_dumper)
_method module_definition.sort_value
	## Sort value.
	## @return {sw:char16_vector}
	_return .name
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method module_definition.equals?(other)
	## Equals?
	## @param {mt:module_definition} other
	## @return {sw:false}
	_return _self.name = other.name _andif
		_self.prod = other.prod _andif
		_self.base_ver = other.base_ver _andif
		_self.cur_ver = other.cur_ver _andif
		_self.usgs.eq?(other.usgs)
_endmethod
$

_pragma(classify_level=basic, topic=type_dumper)
_method module_definition.equals_disregarding_typing?(other)
	## Equals disregarding typing?
	## @param {mt:module_definition} other
	## @return {sw:false}
	_return _self.equals?(other)
_endmethod
$

define_binary_operator_case(
	:|cf|, module_definition, module_definition,
	_proc(definition_a, definition_b)
		## @param {mt:module_definition} definition_a
		## @param {mt:module_definition} definition_b
		## @return {sw:false|sw:maybe}
		_return definition_a.sort_value _cf definition_b.sort_value
	_endproc)
$

define_binary_operator_case(
	:|=|, module_definition, module_definition,
	_proc(definition_a, definition_b)
		## @param {mt:module_definition} definition_a
		## @param {mt:module_definition} definition_b
		## @return {sw:false|sw:maybe}
		_return definition_a.equals?(definition_b)
	_endproc)
$

module_definition.define_show_attributes(
	:name,
	:prod)
$
